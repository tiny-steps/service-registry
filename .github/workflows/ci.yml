name: Build and Push Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # This new step generates the dynamic tag
      - name: Generate image tag
        id: generate_tag
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "tag=${SHORT_SHA}-${TIMESTAMP}" >> $GITHUB_OUTPUT

      # This step is modified to use the generated tag
      - name: Build and push image with Jib
        run: |
          # Construct the full image name: tinysteps/ts-user-service:abc1234-20250805142000
          IMAGE_NAME="subhankarm2312/ts-service-registry"
          IMAGE_TAG="${{ steps.generate_tag.outputs.tag }}"
          
          # Pass the full image name and tag to Maven using the -Dimage property
          mvn compile com.google.cloud.tools:jib-maven-plugin:build -Dimage="${IMAGE_NAME}:${IMAGE_TAG}"

  deploy:
    needs: build-and-push # This ensures the deploy job only runs after build-and-push is successful
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes cluster connection
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }} # The magic credential!

      - name: Deploy to Kubernetes
        run: |
          kubectl config set-cluster remote --server=https://tinysteps.ssi.sh:30000 --insecure-skip-tls-verify=true
          kubectl config set-credentials sish-user --client-key=/dev/null --client-certificate=/dev/null
          kubectl config set-context remote --cluster=remote --user=sish-user
          kubectl config use-context remote

          kubectl set image deployment/ts-service-registry-deployment ts-service-registry=subhankarm2312/ts-service-registry:${{ needs.build-and-push.outputs.IMAGE_TAG }}
